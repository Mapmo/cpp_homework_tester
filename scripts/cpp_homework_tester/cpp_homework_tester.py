#!/bin/env python

# This script is intended to test homeworks written in cpp.

import glob
import os
import sys
import shutil
import test_homeworks
import time
import zipfile

noexec = "--noexec"


def print_usage():
    print("Usage:", os.path.basename(sys.argv[0]), "ZIP_FILE TESTS_DIR - will extract all zips from zip_file_all_homeworks, compile the solutions and test them")
    print("\t\t", noexec, "- does not run tests, only attempts to compile all files from zip_file_all")
    print("\nUsage:", os.path.basename(sys.argv[0]), "HW_DIR TEST_DIR [FN]... - does not compile solutions, HW_DOR is a directory that contains directories named with students ids")
    print("\t\t", "If FNs are passed, the tests will be conducted only for the specified students. The .results file will be overwritten!")
    exit(1)


argc = len(sys.argv)
if argc < 3:
    print_usage()

for arg in sys.argv[1:2]:
    if not os.path.exists(arg):
        print_usage()

if argc > 3:
    if noexec in sys.argv and argc > 4:
        print("Student specified with", noexec)
        print_usage()
    for arg in sys.argv[3:]:
        if arg.isnumeric():
            arg_path = os.path.join(sys.argv[1], arg)
            if not os.path.isdir(arg_path):
                print("No such directory, ", arg_path)
                print_usage()
        elif arg != noexec:
            print(arg, "is an invalid argument")
            print_usage()


if zipfile.is_zipfile(sys.argv[1]):
    src_zip = sys.argv[1]
    tests_dir = sys.argv[2]
    src_zip = os.path.realpath(sys.argv[1])

    if not os.path.isdir(tests_dir):
        print(tests_dir, " is not a directory")

    # Create a new uniq directory where to extract the moodle file that contains all the homeworks
    src_zip_name = os.path.split(src_zip)[1]
    os.chdir("/tmp")
    new_dir = src_zip_name + str(time.time())
    os.mkdir(new_dir)
    os.chdir(new_dir)
    with zipfile.ZipFile(src_zip, 'r') as src_zip_obj:
        src_zip_obj.extractall(".")

    # Create a directory for each student based on the faculty number and extract their homework there
    all_files = list()
    for (root, dirs, files) in os.walk(os.getcwd()):
        all_files += [os.path.join(root, file) for file in files]
    for homework_path in all_files:
        homework = os.path.basename(homework_path)
        if zipfile.is_zipfile(homework_path):
            faculty_number = homework.split('_')[2][2:]
            os.mkdir(faculty_number)
            shutil.move(homework_path, faculty_number)
            os.chdir(faculty_number)
            with zipfile.ZipFile(homework, "r") as hw_zip_obj:
                hw_zip_obj.extractall(".")
            os.unlink(homework)
            # This code of block is for students who zipped a directory containing their homeworks
            if len(glob.glob("*.cpp")) == 0:
                useless_dir = glob.glob("*")[0]
                all_student_files = list()
                for (student_root, student_dirs, student_files) in os.walk(os.getcwd()):
                    all_student_files += [os.path.join(student_root, student_file) for student_file in student_files]
                for student_file in all_student_files:
                    shutil.move(student_file, os.getcwd())
                os.rmdir(useless_dir)
            os.chdir("..")

    # Delete the directories generated by moodle for each student, since they are not needed anymore
    for useless_dir in glob.glob("[!0-9]*"):
        os.rmdir(useless_dir)

    # Compile each file with g++
    for (root, dirs, files) in os.walk(os.getcwd()):
        for file in files:
            if file.endswith(".cpp"):
                file_to_compile = os.path.join(root, file)
                file_to_produce = os.path.join(root, file.replace(".cpp", ".exe"))
                command = "g++ '" + file_to_compile + "' -o '" + file_to_produce + "'"
                os.system(command)
elif os.path.isdir(sys.argv[1]):
    os.chdir(sys.argv[1])
else:
    print("Usage: ", sys.argv[1], " should be a zipfile containing all the solution or a directory, containing compiled solutions")
    exit(1)

if noexec not in sys.argv:
    test_homeworks.main()
